/*
	
You are tasked with implementing a method that returns the
lowest possible number that could be generated after removing n
characters from a string of digits. The method signature should
look like:
public static string GenerateLowestNumber(string number, int n)
Where the number parameter is a string that contains a number
(e.g. “4205123”), and the n parameter represents the number of
characters to remove from the string. The goal of this method is to
return the lowest number that can be generated by removing n
characters from the number provided while keeping the positions
of the remaining characters relative to each other the same (i.e.
the method should remove n characters from the string, but it
cannot re-order the characters).
For example, if number is “4205123” and n is 4, the lowest
possible number that can be generated after removing any 4
characters is “012”. If number is “216504” and n is 3, the lowest
possible number that can be generated after removing 3
characters is “104”.
	
*/

#include "./commonHeader.h"

string GenerateLowestNumber(string num, int n)
{
	int min = INT_MAX;
	vector<vector<int> > dp(num.size(),vector<int>(n + 1, INT_MAX));
	for(int i = 1; i <= num.size(); i++)
	{
		string s = num.substr(0,i);
		dp[i - 1][0] = stol(s);
	}
	
	for(int i = 0; i < num.size(); i++)
	{
		//remove j number of digits
		for(int j = 1; j < n + 1; j++)
		{
			int min = INT_MAX;
			for(int k = 0; k < num.size(); k++)
			{
				//if i number is to be removed
				dp[i][j] = std::min(dp[i][j],dp[i - 1][j - 1]);
				
			}
			
			//
			//dp[i][j] = std::min(dp[i][j],stol(dp[i][j - 1]));
			
		}
	}
	
}

//dfs
void GenerateLowestNumberHelper(string& num, int index, int count, string s, string& chosenString,int nChosen, long& min)
{
	if(count == nChosen)
	{
		string::size_type sz;
		long number = stol(s,&sz);
		if(number < min)
		{
			min = number;
			chosenString = s;
		}
		return;
	}
	
	for(int i = index; i < num.size(); i++)
	{
		GenerateLowestNumberHelper(num,i + 1,count + 1,s + num[i],chosenString,nChosen,min);
	}
}

string GenerateLowestNumberI(string num, int n)
{
	int nChosen = num.size() - n;
	if(nChosen < 1)
		return "";
	
	long min = INT_MAX;
	string chosenString = "";
	GenerateLowestNumberHelper(num,0,0,"",chosenString,nChosen,min);
	return chosenString;
}


//greedy, but it is not correct
string GenerateLowestNumberII(string num, int n)
{
	
	/*
	int nChosen = num.size() - n;
	if(nChosen < 1)
		return "";
	int number = INT_MAX;
	
	string s = num;
	vector<vector<string> > dp(num.size(),vector<string>(num.size(), ""));
	
	for(int k = 0; k < nChosen; k++)
	{
		for(int i = 0 ; i < num.size(); i++)
		{
			for(int j = i + 1; j < num.size(); j++)
			{
				if(i == 0)
				{
					dp[i][j] += num[i];
				}
				else
				{
					dp[i][j] += num[j];
				}
			}
		}
	}
	
	return s;
	*/
	
	//failed on 	
	//string num = "216504"; => 104
	//int n = 3;

	string s = num;
	int smallest = INT_MAX;
	string::size_type sz;   // alias of size_t
	for(int i = 0; i < n; i++)
	{
		int l = 0, r = s.size() - 1;
		//remove from the left
		string leftString = s.substr(l + 1);
		long left = stol(leftString,&sz);
		//remove from the right
		string rightString = s.substr(0,r);
		long right = stol(rightString,&sz);
		
		if(left < right)
		{
			s = leftString;
		}
		else
		{
			s = rightString;
		}
	}
	
	return s;
}


//http://codercareer.blogspot.com/2013/11/no-48-least-number-after-deleting-digits.html
//O(n ^ 2)
string GenerateLowestNumberIII(string num, int n)
{
	//the rule is to delete the first number that is greater than one to its right, if not found, ascendingly sorted, delete the last
	string s = num;
	for(int i = 0; i < n; i++)
	{
		int j = 0;
		while(j + 1 < s.size() && s[j] < s[j + 1])
		{
			j++;
		}
		
		//ascedingly sorted
		if(j + 1 == s.size())
		{
			s = s.substr(0,s.size() - 1);
		}
		else
		{
			s = s.erase(j,1);
		}
	}
	return s;
}


int main()
{
	string num = "216504";
	int n = 3;
	//string s1 = GenerateLowestNumberI(num,n);
	string s2 = GenerateLowestNumberIII(num,n);
	cout << s2 << endl;
	//cout << s1 << " " << s2 << endl;
	//Reverse(s);
	//cout << s << endl;
}